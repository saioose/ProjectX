import MetaTrader5 as mt5
import pandas as pd
from datetime import datetime, timedelta
import plotly.graph_objects as go
import numpy as np
from scipy.optimize import curve_fit
import logging

# Set up logging for debugging
logging.basicConfig(level=logging.DEBUG)

# Initialize MT5 connection
def initialize_mt5(account_no, password, server):
    if not mt5.initialize(login=account_no, server=server, password=password):
        print("Failed to initialize MT5, error code:", mt5.last_error())
        return False
    print("MT5 connection established successfully.")
    return True

# Function to fetch historical data and store prices
def fetch_data(symbol, start_time, end_time, symbol_prices):
    print(f"Fetching data for {symbol} from {start_time} to {end_time}...")
    rates = mt5.copy_rates_range(symbol, mt5.TIMEFRAME_M15, start_time, end_time)

    if rates is None:
        print(f"Error fetching data for {symbol}: {mt5.last_error()}")
        return None

    if len(rates) == 0:
        print(f"No data found for {symbol}.")
        return None

    df = pd.DataFrame(rates)
    df['time'] = pd.to_datetime(df['time'], unit='s')
    df.set_index('time', inplace=True)
    symbol_prices[symbol] = df['close']  # Store the close prices for the symbol
    print(f"Fetched {len(df)} data points for {symbol}.")
    return df

# Function to calculate percentage difference between previous and current candle
def calculate_percentage_difference_previous_candle(df):
    df['prev_pct_diff'] = df['close'].pct_change(periods=1) * 100  # Convert to percentage
    return df

# Sinusoidal function definition with amplitude, frequency, phase, vertical shift, and linear trend
def sin_func(x, a, b, c, d, e):
    return a * np.sin(b * x + c) + d + e * x

# Responsive chart with Plotly for percentage difference
def plot_percentage_difference(percentage_data, symbols):
    fig = go.Figure()

    for symbol, prev_pct_diff in percentage_data.items():
        fig.add_trace(go.Scatter(
            x=prev_pct_diff.index,
            y=prev_pct_diff,
            mode='lines',
            name=f'{symbol} Previous Candle % Difference'
        ))

    # Set titles and layout for percentage difference chart
    fig.update_layout(
        title=f'Percentage Difference between Previous and Current Candle ({symbols[0]} vs {symbols[1]})',
        xaxis_title='Time',
        yaxis_title='Percentage Change (%)',
        xaxis=dict(
            rangeselector=dict(
                buttons=[
                    dict(count=1, label="1m", step="month", stepmode="backward"),
                    dict(count=6, label="6m", step="month", stepmode="backward"),
                    dict(step="all")
                ]
            ),
            rangeslider=dict(visible=True),
            type="date"
        ),
        template='plotly_white'
    )

    print("Displaying the interactive Plotly chart for percentage difference.")
    fig.show()

# Function to plot the difference between two symbols using points and lines with evolving sine wave
def plot_difference_between_symbols_points(percentage_data, symbols, symbol_prices):
    if symbols[0] not in percentage_data or symbols[1] not in percentage_data:
        logging.error(f"Missing data for one of the symbols: {symbols}")
        return

    symbol1_diff = percentage_data[symbols[0]]
    symbol2_diff = percentage_data[symbols[1]]

    difference = symbol1_diff - symbol2_diff
    difference = difference.dropna()
    logging.debug(f"Cleaned difference data (NaN removed): {difference.head()}")

    significant_points = difference[abs(difference) > 0.15]
    total_significant_points = len(significant_points)
    print(f"Total points where the difference exceeds 0.15%: {total_significant_points}")

    if total_significant_points > 0:
        significant_points_df = significant_points.reset_index()
        significant_points_df.columns = ['Time', 'Difference']

        significant_points_df['Price_' + symbols[0]] = symbol_prices[symbols[0]].reindex(significant_points.index).values
        significant_points_df['Price_' + symbols[1]] = symbol_prices[symbols[1]].reindex(significant_points.index).values

        output_file = 'significant_points.xlsx'
        with pd.ExcelWriter(output_file, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
            significant_points_df.to_excel(writer, sheet_name='Significant Points', index=False)
        print(f"Significant points with prices logged to {output_file}")

    time_in_hours = (difference.index - difference.index[0]).total_seconds() / 3600

    try:
        popt, _ = curve_fit(sin_func, time_in_hours, difference, p0=[1, 0.1, 0, 0, 0])
        logging.debug(f"Fitted parameters: a={popt[0]}, b={popt[1]}, c={popt[2]}, d={popt[3]}, e={popt[4]}")
    except Exception as e:
        logging.error(f"Error during curve fitting: {e}")
        return

    fitted_curve = sin_func(time_in_hours, *popt)

    fig = go.Figure()

    fig.add_trace(go.Scatter(
        x=difference.index,
        y=difference,
        mode='markers',
        name=f'Difference Points ({symbols[0]} - {symbols[1]})'
    ))

    fig.add_trace(go.Scatter(
        x=significant_points.index,
        y=significant_points,
        mode='markers',
        name='Significant Points (> 0.15%)',
        marker=dict(color='green', size=8)
    ))

    fig.add_trace(go.Scatter(
        x=difference.index,
        y=difference,
        mode='lines',
        name=f'Difference Line ({symbols[0]} - {symbols[1]})',
        line=dict(color='blue')
    ))

    fig.add_trace(go.Scatter(
        x=difference.index,
        y=fitted_curve,
        mode='lines',
        name='Fitted Sinusoidal Curve',
        line=dict(color='red', width=2),
        yaxis='y2'
    ))

    fig.update_layout(
        title=f'Difference between {symbols[0]} and {symbols[1]} (Points & Line with Fitted Curve)',
        xaxis_title='Time',
        yaxis_title='Difference (%)',
        xaxis=dict(
            rangeselector=dict(
                buttons=[
                    dict(count=1, label="1m", step="month", stepmode="backward"),
                    dict(count=6, label="6m", step="month", stepmode="backward"),
                    dict(step="all")
                ]
            ),
            rangeslider=dict(visible=True),
            type="date"
        ),
        yaxis=dict(autorange=True),
        yaxis2=dict(
            title='Fitted Sinusoidal Curve',
            overlaying='y',
            side='right',
            showgrid=False
        ),
        template='plotly_white'
    )

    print("Displaying the interactive Plotly chart with Scatter, Line, and Fitted Curve on separate y-axes.")
    fig.show()

# Main execution
if __name__ == "__main__":
    account_no = 190669726
    password = "Password@69"
    server = "Exness-MT5Trial14"

    if not initialize_mt5(account_no, password, server):
        quit()

    symbols = ["BTCUSD", "ETHUSD"]
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(days=50)

    percentage_data = {}
    symbol_prices = {}

    for symbol in symbols:
        data = fetch_data(symbol, start_time, end_time, symbol_prices)
        if data is not None:
            data = calculate_percentage_difference_previous_candle(data)
            percentage_data[symbol] = data['prev_pct_diff']

    plot_percentage_difference(percentage_data, symbols)

    plot_difference_between_symbols_points(percentage_data, symbols, symbol_prices)

    mt5.shutdown()
