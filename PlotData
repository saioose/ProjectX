import pandas as pd
from bokeh.plotting import figure, curdoc
from bokeh.models import ColumnDataSource, HoverTool, Span, Toggle, Div
from bokeh.layouts import column, row

# Load the CSV files
csv_file_path_1 = r"C:\Users\abhis\PycharmProjects\ProjectY\crypto_data_efficient.csv"
csv_file_path_2 = r"C:\Users\abhis\PycharmProjects\ProjectY\crypto_data_efficient1.csv"

# Read the CSV files
data_df_1 = pd.read_csv(csv_file_path_1, header=0)
data_df_2 = pd.read_csv(csv_file_path_2, header=0)

# Assign proper column names
data_df_1.columns = ["volume", "vw", "open", "close", "high", "low", "timestamp", "n"]
data_df_2.columns = ["volume", "vw", "open", "close", "high", "low", "timestamp", "n"]

# Convert 'timestamp' to datetime
data_df_1['timestamp'] = pd.to_datetime(data_df_1['timestamp'], unit='ms')
data_df_2['timestamp'] = pd.to_datetime(data_df_2['timestamp'], unit='ms')

# Merge both datasets on the same timeline
all_timestamps = pd.DataFrame({'timestamp': pd.concat([data_df_1['timestamp'], data_df_2['timestamp']]).drop_duplicates()})
data_df_1 = pd.merge(all_timestamps, data_df_1, on='timestamp', how='left')
data_df_2 = pd.merge(all_timestamps, data_df_2, on='timestamp', how='left')

# Prepare the data sources for Bokeh
source_1 = ColumnDataSource(data=dict(x=[], top=[], bottom=[], high=[], low=[], colors=[], volume=[]))
source_2 = ColumnDataSource(data=dict(x=[], top=[], bottom=[], high=[], low=[], colors=[], volume=[]))

# Create the first Bokeh figure
p = figure(
    x_axis_type="datetime",
    title="Enhanced Candlestick Chart - Data Source 1",
    sizing_mode="stretch_width",
    height=300,
    tools="pan,wheel_zoom,box_zoom,reset"
)

# Configure the plot elements for the first graph
p.segment(x0='x', x1='x', y0='low', y1='high', color="colors", source=source_1, line_width=2)
p.vbar(x='x', width=50000, bottom='bottom', top='top', fill_color='colors', line_color="colors", source=source_1)

# Create the second Bokeh figure
p2 = figure(
    x_axis_type="datetime",
    title="Secondary Candlestick Chart - Data Source 2",
    sizing_mode="stretch_width",
    height=300,
    tools="pan,wheel_zoom,box_zoom,reset"
)

# Configure the plot elements for the second graph
p2.segment(x0='x', x1='x', y0='low', y1='high', color="colors", source=source_2, line_width=2)
p2.vbar(x='x', width=50000, bottom='bottom', top='top', fill_color='colors', line_color="colors", source=source_2)

# Sync the x-axis of both graphs
p2.x_range = p.x_range

# Function to update the charts
def update():
    global data_df_1, data_df_2

    # Prepare data for the first chart
    data_1 = data_df_1.iloc[:len(source_1.data['x']) + 1]
    source_1.data = {
        'x': data_1['timestamp'],
        'top': data_1[['open', 'close']].max(axis=1),
        'bottom': data_1[['open', 'close']].min(axis=1),
        'high': data_1['high'],
        'low': data_1['low'],
        'colors': ["green" if close >= open_ else "red" for close, open_ in zip(data_1['close'], data_1['open'])],
        'volume': data_1['volume']
    }

    # Prepare data for the second chart
    data_2 = data_df_2.iloc[:len(source_2.data['x']) + 1]
    source_2.data = {
        'x': data_2['timestamp'],
        'top': data_2[['open', 'close']].max(axis=1),
        'bottom': data_2[['open', 'close']].min(axis=1),
        'high': data_2['high'],
        'low': data_2['low'],
        'colors': ["green" if close >= open_ else "red" for close, open_ in zip(data_2['close'], data_2['open'])],
        'volume': data_2['volume']
    }

# Add periodic callback for live updates
curdoc().add_periodic_callback(update, 500)

# Layout the plots
layout = column(
    row(p, sizing_mode="stretch_both"),
    row(p2, sizing_mode="stretch_both"),
    sizing_mode="stretch_both"
)
curdoc().add_root(layout)
